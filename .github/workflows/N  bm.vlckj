name

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Remove existing firewall rule to avoid duplication
          netsh advfirewall firewall delete rule name="mehraz-Tailscale" || Write-Host "No existing rule to delete"

          # Allow incoming RDP connections on port 3389
          netsh advfirewall firewall add rule name="mehraz-Tailscale" `
              dir=in action=allow protocol=TCP localport=3389

          # Restart RDP service to apply changes
          Restart-Service -Name TermService -Force

      - name: Create or Update RDP User with Password
        run: |
          $username = "mehraz"
          $plainPassword = "Mehraz@RDP2025"   # must meet Windows password policy
          try {
              # If user exists, update their password using net user (works on Windows runners)
              if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
                  Write-Host "User '$username' exists — updating password and ensuring membership."
                  net user $username "$plainPassword"
              } else {
                  Write-Host "Creating user '$username'."
                  $securePass = ConvertTo-SecureString $plainPassword -AsPlainText -Force
                  New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
              }

              # Ensure group membership
              if (-not (Get-LocalGroup -Name "Remote Desktop Users" -ErrorAction SilentlyContinue)) {
                  Write-Host "Remote Desktop Users group not found — skipping group add."
              } else {
                  Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
              }

              # Add to Administrators if desired (comment out the next line if you do NOT want admin rights)
              Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue

              # Export credentials to environment for later steps
              echo "RDP_CREDS=User: $username | Password: $plainPassword" >> $env:GITHUB_ENV

          } catch {
              Write-Host "Error creating/updating user: $_"
              exit 1
          }

          # Verify user exists
          if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
              Write-Error "User creation/update failed"
              exit 1
          } else {
              Write-Host "User '$username' present."
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TAILSCALE_AUTH_KEY) {
              Write-Error "TAILSCALE_AUTH_KEY secret not provided."
              exit 1
          }

          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID

          # Wait for Tailscale to assign an IPv4 address
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 20) {
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) -join ","
              if ($tsIP -and $tsIP -ne "") { break }
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          Write-Host "Tailscale IP: $tsIP"
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          if (-not $env:TAILSCALE_IP) {
              Write-Error "TAILSCALE_IP not found in environment."
              exit 1
          }

          Write-Host "Testing connectivity to $env:TAILSCALE_IP:3389"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to port 3389 on $env:TAILSCALE_IP failed."
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection (prints credentials)
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: mehraz"
          Write-Host "Password: Mehraz@RDP2025"
          Write-Host "==================`n"

          # Keep the runner active indefinitely (cancel the workflow to stop)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - use Cancel Workflow in GitHub to stop"
              Start-Sleep -Seconds 300
          }
          
