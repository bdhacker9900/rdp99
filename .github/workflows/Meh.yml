name: Windows RDP via Tailscale

on:
  workflow_dispatch:
    inputs:
      authkey:
        description: 'Tailscale Auth Key (optional if using secrets)'
        required: false
        type: string

jobs:
  windows-rdp:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Enable RDP
      shell: powershell
      run: |
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        
        # Enable RDP through Windows Firewall
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Set RDP authentication (disable NLA for easier access)
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0
        
        # Start Remote Desktop Services
        Set-Service -Name TermService -StartupType Automatic
        Start-Service -Name TermService
        
        Write-Host "RDP has been enabled successfully"
    
    - name: Create RDP User
      shell: powershell
      run: |
        # Create a new user for RDP access
        $Username = "rdpuser"
        $Password = ConvertTo-SecureString "mehraz@OP9900" -AsPlainText -Force
        
        # Create the user
        New-LocalUser -Name $Username -Password $Password -FullName "RDP User" -Description "User for RDP Access" -ErrorAction SilentlyContinue
        
        # Add user to necessary groups
        Add-LocalGroupMember -Group "Users" -Member $Username -ErrorAction SilentlyContinue
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $Username -ErrorAction SilentlyContinue
        
        # Ensure password never expires
        Set-LocalUser -Name $Username -PasswordNeverExpires $true
        
        Write-Host "==================================="
        Write-Host "RDP User Created:"
        Write-Host "Username: rdpuser"
        Write-Host "Password: mehraz@OP9900"
        Write-Host "==================================="
    
    - name: Install Chocolatey
      shell: powershell
      run: |
        # Install Chocolatey package manager
        if (!(Test-Path "$env:ProgramData\chocolatey\choco.exe")) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        
        # Refresh environment variables
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    
    - name: Install Tailscale
      shell: powershell
      run: |
        # Download Tailscale for Windows
        Write-Host "Downloading Tailscale..."
        $tailscaleUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
        $msiPath = "$env:TEMP\tailscale.msi"
        
        Invoke-WebRequest -Uri $tailscaleUrl -OutFile $msiPath
        
        # Install Tailscale silently
        Write-Host "Installing Tailscale..."
        Start-Process msiexec.exe -ArgumentList "/i", $msiPath, "/quiet", "/qn" -Wait
        
        # Wait for installation to complete
        Start-Sleep -Seconds 10
        
        # Add Tailscale to PATH
        $tailscalePath = "C:\Program Files\Tailscale"
        if (Test-Path $tailscalePath) {
          $env:Path += ";$tailscalePath"
          [Environment]::SetEnvironmentVariable("Path", $env:Path, [EnvironmentVariableTarget]::Process)
        }
        
        Write-Host "Tailscale installed successfully"
    
    - name: Configure and Start Tailscale
      shell: powershell
      env:
        TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY || github.event.inputs.authkey }}
      run: |
        # Start Tailscale service
        Start-Service -Name Tailscale -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 5
        
        # Get Tailscale executable path
        $tailscale = "C:\Program Files\Tailscale\tailscale.exe"
        
        if (Test-Path $tailscale) {
          # Authenticate with Tailscale
          if ([string]::IsNullOrEmpty($env:TAILSCALE_AUTHKEY)) {
            Write-Host "No Tailscale auth key provided. Starting interactive login..."
            & $tailscale up --unattended
          } else {
            Write-Host "Connecting to Tailscale with auth key..."
            & $tailscale up --authkey=$env:TAILSCALE_AUTHKEY --unattended --accept-routes
          }
          
          # Wait for connection
          Start-Sleep -Seconds 10
          
          # Get Tailscale status
          & $tailscale status
          
          # Get Tailscale IP
          $tailscaleIP = & $tailscale ip -4
          Write-Host "==================================="
          Write-Host "Tailscale IP: $tailscaleIP"
          Write-Host "==================================="
          
          # Save to environment variable
          echo "TAILSCALE_IP=$tailscaleIP" >> $env:GITHUB_ENV
        } else {
          Write-Host "Tailscale executable not found!"
        }
    
    - name: Install ngrok (Alternative Access)
      shell: powershell
      run: |
        if (![string]::IsNullOrEmpty("${{ secrets.NGROK_AUTH_TOKEN }}")) {
          # Download ngrok
          Write-Host "Downloading ngrok..."
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "$env:TEMP\ngrok.zip"
          
          # Extract ngrok
          Expand-Archive -Path "$env:TEMP\ngrok.zip" -DestinationPath "$env:TEMP\ngrok" -Force
          
          # Configure ngrok
          & "$env:TEMP\ngrok\ngrok.exe" config add-authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
          
          # Start ngrok tunnel for RDP (port 3389)
          Start-Process -FilePath "$env:TEMP\ngrok\ngrok.exe" -ArgumentList "tcp 3389" -WindowStyle Hidden
          
          Start-Sleep -Seconds 10
          
          # Try to get ngrok URL
          try {
            $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction SilentlyContinue
            $ngrokUrl = $response.tunnels[0].public_url
            Write-Host "ngrok URL: $ngrokUrl"
          } catch {
            Write-Host "Could not retrieve ngrok URL"
          }
        } else {
          Write-Host "ngrok auth token not provided, skipping ngrok setup"
        }
    
    - name: Configure Windows Defender Exclusions
      shell: powershell
      run: |
        # Add exclusions to prevent interference
        Add-MpPreference -ExclusionPath "C:\Program Files\Tailscale" -ErrorAction SilentlyContinue
        Add-MpPreference -ExclusionProcess "tailscale.exe" -ErrorAction SilentlyContinue
        Add-MpPreference -ExclusionProcess "tailscaled.exe" -ErrorAction SilentlyContinue
        
        Write-Host "Windows Defender exclusions configured"
    
    - name: Display Connection Information
      shell: powershell
      run: |
        Write-Host "======================================="
        Write-Host "Connection Information:"
        Write-Host "======================================="
        
        # Get computer info
        $computerName = $env:COMPUTERNAME
        Write-Host "Computer Name: $computerName"
        
        # Get IP addresses
        $ipAddresses = Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -notlike "*Loopback*"} | Select-Object -ExpandProperty IPAddress
        Write-Host "Local IP Addresses:"
        $ipAddresses | ForEach-Object { Write-Host "  - $_" }
        
        if (Test-Path env:TAILSCALE_IP) {
          Write-Host ""
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
        }
        
        Write-Host ""
        Write-Host "RDP Port: 3389"
        Write-Host "Username: rdpuser"
        Write-Host "Password: mehraz@OP9900"
        Write-Host ""
        Write-Host "To connect via Tailscale:"
        Write-Host "1. Install Tailscale on your local machine"
        Write-Host "2. Connect to your Tailscale network"
        Write-Host "3. Use Remote Desktop Client to connect to:"
        Write-Host "   Address: $env:TAILSCALE_IP"
        Write-Host "   Username: rdpuser"
        Write-Host "   Password: mehraz@OP9900"
        Write-Host "======================================="
    
    - name: Keep Alive (6 hours max for public repos)
      shell: powershell
      run: |
        Write-Host "Keeping the workflow alive..."
        Write-Host "Note: This will run for maximum 6 hours on public repos"
        Write-Host "For 24-hour operation, use self-hosted runners"
        
        # Keep alive for ~6 hours (360 minutes)
        for ($i = 1; $i -le 360; $i++) {
          $elapsed = $i * 60
          Write-Host "Alive for $elapsed seconds... $(Get-Date)"
          
          # Check services every 10 minutes
          if ($i % 10 -eq 0) {
            Write-Host "Checking services..."
            
            # Check RDP service
            $rdpService = Get-Service -Name TermService -ErrorAction SilentlyContinue
            if ($rdpService.Status -ne 'Running') {
              Start-Service -Name TermService -ErrorAction SilentlyContinue
              Write-Host "Restarted RDP service"
            }
            
            # Check Tailscale
            $tailscaleService = Get-Service -Name Tailscale -ErrorAction SilentlyContinue
            if ($tailscaleService -and $tailscaleService.Status -ne 'Running') {
              Start-Service -Name Tailscale -ErrorAction SilentlyContinue
              Write-Host "Restarted Tailscale service"
            }
          }
          
          Start-Sleep -Seconds 60
        }
        
        Write-Host "Workflow completed after 6 hours"
    
    - name: Cleanup (runs on cancellation)
      if: cancelled()
      shell: powershell
      run: |
        Write-Host "Cleaning up..."
        
        # Disconnect Tailscale
        $tailscale = "C:\Program Files\Tailscale\tailscale.exe"
        if (Test-Path $tailscale) {
          & $tailscale down
        }
        
        # Stop services
        Stop-Service -Name Tailscale -Force -ErrorAction SilentlyContinue
        
        # Kill ngrok if running
        Stop-Process -Name ngrok -Force -ErrorAction SilentlyContinue
        
        Write-Host "Cleanup completed"
