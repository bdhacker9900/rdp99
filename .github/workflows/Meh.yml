name: Ubuntu RDP via Tailscale

on:
  workflow_dispatch:
    inputs:
      authkey:
        description: 'Tailscale Auth Key (optional if using secrets)'
        required: false
        type: string

jobs:
  ubuntu-rdp:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Ubuntu Desktop Environment
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          xfce4 \
          xfce4-goodies \
          xrdp \
          xorg \
          dbus-x11 \
          x11-xserver-utils \
          wget \
          curl \
          nano \
          git \
          firefox \
          jq \
          net-tools
    
    - name: Configure XRDP
      run: |
        # Start XRDP service (without systemctl since we're in container)
        sudo service xrdp start || true
        
        # Configure XRDP to use Xfce
        sudo sed -i 's/port=3389/port=3390/g' /etc/xrdp/xrdp.ini
        sudo sed -i 's/max_bpp=32/#max_bpp=32\nmax_bpp=128/g' /etc/xrdp/xrdp.ini
        sudo sed -i 's/xserverbpp=24/#xserverbpp=24\nxserverbpp=128/g' /etc/xrdp/xrdp.ini
        
        # Configure session
        echo "xfce4-session" | sudo tee /etc/xrdp/startwm.sh
        
        # Fix permissions
        sudo chmod +x /etc/xrdp/startwm.sh
        
        # Configure polkit (create directory first)
        sudo mkdir -p /etc/polkit-1/localauthority/50-local.d/
        
        # Create polkit configuration file
        echo '[Allow Colord all Users]' | sudo tee /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla
        echo 'Identity=unix-user:*' | sudo tee -a /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla
        echo 'Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile' | sudo tee -a /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla
        echo 'ResultAny=no' | sudo tee -a /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla
        echo 'ResultInactive=no' | sudo tee -a /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla
        echo 'ResultActive=yes' | sudo tee -a /etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla
    
    - name: Create RDP User
      run: |
        # Create a user for RDP access
        sudo useradd -m -s /bin/bash rdpuser || echo "User might already exist"
        echo "rdpuser:ChangeMe123!" | sudo chpasswd
        sudo usermod -aG sudo rdpuser
        
        # Setup home directory
        sudo mkdir -p /home/rdpuser/Desktop
        sudo chown -R rdpuser:rdpuser /home/rdpuser
        
        echo "==================================="
        echo "RDP User Created:"
        echo "Username: rdpuser"
        echo "Password: ChangeMe123!"
        echo "==================================="
    
    - name: Install Tailscale
      run: |
        # Add Tailscale's package signing key and repository (updated method)
        curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
        curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
        
        # Install Tailscale
        sudo apt-get update
        sudo apt-get install -y tailscale
    
    - name: Start Services
      run: |
        # Start XRDP service (using service command instead of systemctl)
        sudo service xrdp restart || true
        sudo service xrdp status || true
        
        # Start Tailscale daemon in background
        sudo nohup tailscaled > tailscaled.log 2>&1 &
        sleep 5
        
        # Check if tailscaled is running
        ps aux | grep tailscaled | grep -v grep || echo "tailscaled might not be running"
    
    - name: Connect to Tailscale
      env:
        TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY || github.event.inputs.authkey }}
      run: |
        # Authenticate with Tailscale
        if [ -z "$TAILSCALE_AUTHKEY" ]; then
          echo "No Tailscale auth key provided. Generating login URL..."
          sudo -E tailscale up --ssh 2>&1 || true
        else
          sudo -E tailscale up --authkey="$TAILSCALE_AUTHKEY" --ssh --accept-routes 2>&1 || true
        fi
        
        # Wait for connection
        sleep 10
        
        # Display Tailscale status
        sudo tailscale status || echo "Failed to get Tailscale status"
        
        # Get Tailscale IP
        TAILSCALE_IP=$(sudo tailscale ip -4 2>/dev/null || echo "Not connected")
        echo "==================================="
        echo "Tailscale IP: $TAILSCALE_IP"
        echo "==================================="
        
        # Save connection info
        echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
    
    - name: Setup ngrok (Alternative Access)
      run: |
        # Download ngrok (updated URL)
        wget -q -O ngrok.tar.gz https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok.tar.gz
        chmod +x ngrok
        
        # Setup ngrok (requires NGROK_AUTH_TOKEN secret)
        if [ ! -z "${{ secrets.NGROK_AUTH_TOKEN }}" ]; then
          ./ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ./ngrok tcp 3390 --log=stdout > ngrok.log 2>&1 &
          sleep 10
          
          # Display ngrok URL (with proper error handling)
          if command -v jq &> /dev/null; then
            curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' 2>/dev/null || echo "ngrok API not available yet"
          else
            echo "jq not installed, cannot parse ngrok URL"
          fi
        else
          echo "ngrok auth token not provided, skipping ngrok setup"
        fi
    
    - name: Display Connection Information
      run: |
        echo "======================================="
        echo "Connection Information:"
        echo "======================================="
        if [ ! -z "${{ env.TAILSCALE_IP }}" ] && [ "${{ env.TAILSCALE_IP }}" != "Not connected" ]; then
          echo "Tailscale IP: ${{ env.TAILSCALE_IP }}"
          echo "RDP Port: 3390"
        else
          echo "Tailscale connection failed or not configured"
        fi
        echo "Username: rdpuser"
        echo "Password: ChangeMe123!"
        echo ""
        echo "To connect via Tailscale:"
        echo "1. Install Tailscale on your local machine"
        echo "2. Connect to your Tailscale network"
        echo "3. Use RDP client to connect to: ${{ env.TAILSCALE_IP }}:3390"
        echo "======================================="
        
        # Check if ngrok is running
        if [ -f ngrok.log ]; then
          echo ""
          echo "ngrok tunnel (if configured):"
          grep "started tunnel" ngrok.log 2>/dev/null || echo "ngrok not running or still starting"
        fi
    
    - name: Keep Alive (6 hours max for public repos)
      run: |
        # GitHub Actions timeout for public repos is 6 hours
        # For 24 hours, you need self-hosted runners or implement restart logic
        
        echo "Keeping the workflow alive..."
        echo "Note: This will run for maximum 6 hours on public repos"
        echo "For 24-hour operation, use self-hosted runners"
        
        # Keep alive for ~6 hours (21600 seconds)
        for i in {1..360}; do
          echo "Alive for $((i*60)) seconds... ($(date))"
          
          # Check services status every 10 minutes
          if [ $((i % 10)) -eq 0 ]; then
            echo "Checking services..."
            sudo service xrdp status || sudo service xrdp restart || true
            sudo tailscale status 2>/dev/null || echo "Tailscale status check failed"
          fi
          
          sleep 60
        done
        
        echo "Workflow completed after 6 hours"

    - name: Cleanup (runs on cancellation)
      if: cancelled()
      run: |
        echo "Cleaning up..."
        sudo tailscale down 2>/dev/null || true
        sudo service xrdp stop || true
        pkill ngrok || true
