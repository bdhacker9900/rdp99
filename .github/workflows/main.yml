name: rdp with mehraz

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP
        run: |
          Write-Host "Configuring RDP settings..."
          
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          
          # Disable Network Level Authentication for easier access
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          
          # Set Security Layer to RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force
          
          # Configure firewall rules
          Write-Host "Configuring firewall..."
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
          
          # Remove any existing custom rule
          netsh advfirewall firewall delete rule name="mehraz-Tailscale" 2>$null
          
          # Add new firewall rule for RDP
          netsh advfirewall firewall add rule name="mehraz-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389
          
          # Restart Remote Desktop service
          Write-Host "Restarting Terminal Service..."
          Restart-Service -Name TermService -Force
          Start-Sleep -Seconds 3
          
          Write-Host "RDP configuration completed successfully"

      - name: Create RDP User with Fixed Password
        run: |
          $ErrorActionPreference = "Stop"
          $username = "mehraz"
          $password = "Mehraz.9900"
          
          Write-Host "Setting up user account: $username"
          
          try {
              # Remove existing user if present using PowerShell
              Write-Host "Checking for existing user..."
              $existingUser = Get-LocalUser -Name $username -ErrorAction SilentlyContinue
              if ($existingUser) {
                  Write-Host "Removing existing user..."
                  Remove-LocalUser -Name $username -Force
                  Start-Sleep -Seconds 2
              }
              
              # Create secure password
              $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
              
              # Create new user using PowerShell cmdlet
              Write-Host "Creating new user..."
              $newUser = New-LocalUser -Name $username `
                                       -Password $securePassword `
                                       -FullName "Mehraz User" `
                                       -Description "RDP Access User" `
                                       -AccountNeverExpires `
                                       -PasswordNeverExpires `
                                       -UserMayNotChangePassword `
                                       -ErrorAction Stop
              
              Write-Host "User created: $($newUser.Name)"
              
              # Enable the account
              Enable-LocalUser -Name $username -ErrorAction Stop
              
              # Add to Administrators group
              Write-Host "Adding user to Administrators group..."
              try {
                  Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction Stop
                  Write-Host "Added to Administrators group"
              } catch {
                  if ($_.Exception.Message -notlike "*already a member*") {
                      throw $_
                  }
                  Write-Host "User already in Administrators group"
              }
              
              # Add to Remote Desktop Users group
              Write-Host "Adding user to Remote Desktop Users group..."
              try {
                  Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction Stop
                  Write-Host "Added to Remote Desktop Users group"
              } catch {
                  if ($_.Exception.Message -notlike "*already a member*") {
                      throw $_
                  }
                  Write-Host "User already in Remote Desktop Users group"
              }
              
              # Verify user creation and status
              Start-Sleep -Seconds 2
              $verifyUser = Get-LocalUser -Name $username -ErrorAction Stop
              if ($verifyUser) {
                  Write-Host "✓ User $username verified successfully"
                  Write-Host "  Enabled: $($verifyUser.Enabled)"
                  Write-Host "  Password Never Expires: $($verifyUser.PasswordNeverExpires)"
                  
                  # Save password to environment
                  echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
                  
                  # Display group memberships
                  Write-Host "`nGroup Memberships:"
                  Get-LocalGroupMember -Group "Administrators" | Where-Object {$_.Name -like "*$username*"} | Format-Table
                  Get-LocalGroupMember -Group "Remote Desktop Users" | Where-Object {$_.Name -like "*$username*"} | Format-Table
              } else {
                  throw "User verification failed"
              }
              
          } catch {
              Write-Error "Failed to create user: $_"
              
              # Fallback to net user command
              Write-Host "`nAttempting fallback method with net user..."
              $ErrorActionPreference = "Continue"
              
              # Try creating with net user
              net user $username $password /add /y
              if ($LASTEXITCODE -eq 0) {
                  net localgroup Administrators $username /add 2>$null
                  net localgroup "Remote Desktop Users" $username /add 2>$null
                  net user $username /active:yes
                  
                  echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
                  Write-Host "✓ User created using fallback method"
              } else {
                  Write-Error "Both methods failed to create user"
                  exit 1
              }
          }

      - name: Install Tailscale
        run: |
          Write-Host "Installing Tailscale..."
          
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          # Download Tailscale installer
          Write-Host "Downloading Tailscale installer..."
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          
          # Install Tailscale
          Write-Host "Running Tailscale installer..."
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait -NoNewWindow
          
          # Clean up installer
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          
          # Wait for installation to complete
          Start-Sleep -Seconds 5
          
          # Verify installation
          if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
              Write-Host "✓ Tailscale installed successfully"
          } else {
              Write-Error "Tailscale installation failed"
              exit 1
          }

      - name: Establish Tailscale Connection
        run: |
          Write-Host "Connecting to Tailscale network..."
          
          # Set Tailscale path
          $tailscale = "$env:ProgramFiles\Tailscale\tailscale.exe"
          
          # Authenticate and connect
          Write-Host "Authenticating with Tailscale..."
          & $tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} `
                          --hostname=gh-runner-$env:GITHUB_RUN_ID `
                          --accept-routes `
                          --accept-dns=false
          
          # Wait for IP assignment
          Write-Host "Waiting for Tailscale IP assignment..."
          $tsIP = $null
          $retries = 0
          $maxRetries = 20
          
          while (-not $tsIP -and $retries -lt $maxRetries) {
              Start-Sleep -Seconds 3
              $tsIP = & $tailscale ip -4 2>$null
              $tsIP = $tsIP | Where-Object { $_ -match '\d+\.\d+\.\d+\.\d+' } | Select-Object -First 1
              $retries++
              Write-Host "Attempt $retries of $maxRetries..."
          }
          
          if (-not $tsIP) {
              Write-Error "Failed to get Tailscale IP after $maxRetries attempts"
              & $tailscale status
              exit 1
          }
          
          Write-Host "✓ Tailscale connected successfully"
          Write-Host "Tailscale IP: $tsIP"
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          
          # Show Tailscale status
          Write-Host "`nTailscale Status:"
          & $tailscale status

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Verifying RDP accessibility..."
          
          # Check if RDP service is running
          $rdpService = Get-Service -Name TermService
          if ($rdpService.Status -ne 'Running') {
              Write-Host "Starting RDP service..."
              Start-Service -Name TermService
              Start-Sleep -Seconds 3
          }
          
          # Test local RDP port
          Write-Host "Testing local RDP port..."
          $localTest = Test-NetConnection -ComputerName localhost -Port 3389 -WarningAction SilentlyContinue
          if ($localTest.TcpTestSucceeded) {
              Write-Host "✓ Local RDP port is accessible"
          } else {
              Write-Warning "Local RDP port test failed"
          }
          
          # Test Tailscale IP connectivity
          if ($env:TAILSCALE_IP) {
              Write-Host "Testing Tailscale IP connectivity..."
              $tsTest = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
              if ($tsTest.TcpTestSucceeded) {
                  Write-Host "✓ RDP is accessible via Tailscale"
              } else {
                  Write-Warning "Tailscale RDP test failed (this may be normal due to network isolation)"
              }
          }
          
          # Display network configuration
          Write-Host "`nNetwork Configuration:"
          ipconfig | Select-String -Pattern "IPv4|Tailscale"

      - name: Maintain Connection
        run: |
          Write-Host "`n" 
          Write-Host "============================================"
          Write-Host "           RDP CONNECTION READY             "
          Write-Host "============================================"
          Write-Host ""
          Write-Host "  Tailscale IP : $env:TAILSCALE_IP"
          Write-Host "  Username     : mehraz"
          Write-Host "  Password     : $env:RDP_PASSWORD"
          Write-Host ""
          Write-Host "  Connect using Remote Desktop Client:"
          Write-Host "  mstsc /v:$env:TAILSCALE_IP"
          Write-Host ""
          Write-Host "============================================"
          Write-Host ""
          Write-Host "Note: Make sure you're connected to the same"
          Write-Host "      Tailscale network to access this machine"
          Write-Host ""
          Write-Host "Press Ctrl+C in GitHub Actions to terminate"
          Write-Host ""
          
          # Keep the runner active
          $startTime = Get-Date
          while ($true) {
              $elapsed = (Get-Date) - $startTime
              $hours = [math]::Floor($elapsed.TotalHours)
              $minutes = $elapsed.Minutes
              $seconds = $elapsed.Seconds
              
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Session Active: $($hours)h $($minutes)m $($seconds)s - Connection available at $env:TAILSCALE_IP"
              
              # Check if RDP service is still running
              $rdpStatus = Get-Service -Name TermService -ErrorAction SilentlyContinue
              if ($rdpStatus.Status -ne 'Running') {
                  Write-Warning "RDP service stopped, attempting restart..."
                  Start-Service -Name TermService -ErrorAction SilentlyContinue
              }
              
              Start-Sleep -Seconds 300
          }
